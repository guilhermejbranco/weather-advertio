{"version":3,"sources":["img/logo.svg","components/CurrentWeather.js","components/Forecast.js","components/CountryList.js","components/Header.js","components/Switch.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","CurrentWeather","props","state","error","apiKey","isLoaded","items","this","getWeather","prevProps","prevState","data","city","length","unit","fahrenheit","fetch","then","res","json","result","setState","temperature","main","system","sys","weather","message","cod","sunsetTime","Date","sunset","sunriseTime","sunrise","className","toLocaleDateString","src","icon","alt","Math","round","temp","wind","speed","String","getHours","padStart","getMinutes","React","Component","Forecast","date","getDay","list","map","item","dt_txt","split","includes","key","dt","getWeekDay","CountryList","event","cityhandler","target","value","sort","a","b","capital","toLowerCase","name","onChange","change","bind","id","alpha3Code","Header","logo","Switch","isChecked","unithandler","checked","type","data-on","data-off","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.027c0396.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9a636878.svg\";","/* Component that renders the current weather for the selected city */\n\nimport React from \"react\";\nimport \"../styles/CurrentWeather.css\";\nimport \"../styles/Common.css\";\n\nclass CurrentWeather extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      apiKey: \"379b341aebf8e4800119466e15cd6e58\",\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    this.getWeather();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.data !== this.props.data && this.props.data.city.length > 3) {\n      this.getWeather();\n    }\n  }\n\n  getWeather() {\n    let unit = this.props.data.fahrenheit ? \"imperial\" : \"metric\";\n    fetch(\n      \"http://api.openweathermap.org/data/2.5/weather?q=\" +\n        this.props.data.city +\n        \"&units=\" +\n        unit +\n        \"&appid=\" +\n        this.state.apiKey\n    )\n      .then(res => res.json())\n      .then(\n        result => {\n          this.setState({\n            isLoaded: true,\n            items: result,\n            temperature: result.main,\n            system: result.sys,\n            weather: result.weather\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        error => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      );\n  }\n\n  render() {\n    const { error, isLoaded, items, temperature, system, weather } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else if (items.cod === 200) {\n      var sunsetTime = new Date(system.sunset * 1000);\n      var sunriseTime = new Date(system.sunrise * 1000);\n      return (\n        <div className=\"card\">\n          <h4>\n            Current Weather{\" \"}\n            <span className=\"small highlightColor\">\n              {\" \"}\n              {new Date().toLocaleDateString()}{\" \"}\n            </span>\n          </h4>\n          <hr />\n\n          <div className=\"container m-0\">\n            <div className=\"half-box half-left\">\n              <h3 className=\"weatherDescription m-0\">{weather[0].main}</h3>\n              <img\n                src={`http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`}\n                className=\"weatherIcon\"\n                alt={weather[0].main}\n              />\n            </div>\n            <div className=\"half-box half-right\">\n              <h3 className=\"currentTemperature m-0\">\n                {Math.round(temperature.temp)}ยบ{\" \"}\n                <span className=\"small\">(wind - {items.wind.speed})</span>\n              </h3>\n            </div>\n          </div>\n\n          <hr />\n\n          <div className=\"container\">\n            <div className=\"half-box half-left\">\n              <h5>\n                <small>Sunrise</small>{\" \"}\n                <span className=\"highlightColor\">\n                  {String(sunriseTime.getHours()).padStart(2, \"0\")} :{\" \"}\n                  {String(sunriseTime.getMinutes()).padStart(2, \"0\")}\n                </span>\n              </h5>\n            </div>\n            <div className=\"half-box half-right\">\n              <h5>\n                <small>Sunset</small>{\" \"}\n                <span className=\"highlightColor\">\n                  {String(sunsetTime.getHours()).padStart(2, \"0\")} :{\" \"}\n                  {String(sunsetTime.getMinutes()).padStart(2, \"0\")}\n                </span>\n              </h5>\n            </div>\n          </div>\n        </div>\n      );\n    } else if (this.props.data.city.length < 4) {\n      return (\n        <div>\n          <h5 className=\"\">Please select a city from the list above.</h5>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"errorBlock\">\n          <h5 className=\"errorMessage\">{items.message}</h5>\n        </div>\n      );\n    }\n  }\n}\n\nexport default CurrentWeather;\n","/* Component that renders the forecast weather for the selected city */\n\nimport React from \"react\";\nimport \"../styles/Forecast.css\";\nimport \"../styles/Common.css\";\n\nclass Forecast extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      apiKey: \"379b341aebf8e4800119466e15cd6e58\",\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    this.getWeather();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.data !== this.props.data && this.props.data.city.length > 3) {\n      this.getWeather();\n    }\n  }\n\n  getWeekDay(date) {\n    var days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\"\n    ];\n    var prnDt = new Date(date);\n\n    return days[prnDt.getDay()];\n  }\n\n  getWeather() {\n    let unit = this.props.data.fahrenheit ? \"imperial\" : \"metric\";\n    fetch(\n      \"http://api.openweathermap.org/data/2.5/forecast?q=\" +\n        this.props.data.city +\n        \"&units=\" +\n        unit +\n        \"&appid=\" +\n        this.state.apiKey\n    )\n      .then(res => res.json())\n      .then(\n        result => {\n          this.setState({\n            isLoaded: true,\n            cod: result.cod,\n            items: result.list\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        error => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      );\n  }\n\n  render() {\n    const { error, isLoaded, cod, items } = this.state;\n\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else if (cod === \"200\") {\n      return (\n        <div className=\"card\">\n          <h4>\n            Forecast <span className=\"small\">(at 12:00)</span>\n          </h4>\n          <hr />\n          <ul className=\"forecastList\">\n            {items.map(item => {\n              return (\n                item.dt_txt &&\n                item.dt_txt.split(\" \")[1].includes(\"12\") && (\n                  <li key={item.dt}>\n                    <h5 className=\"m-0\">\n                      <small>\n                        <div className=\"container\">\n                          <div className=\"third-box half-left vertical-center highlightColor small\">\n                            {this.getWeekDay(item.dt_txt)}\n                          </div>\n                          <div className=\"third-box half-center vertical-center\">\n                            {item.weather[0].main}\n                          </div>\n                          <div className=\"third-box half-right\">\n                            <img\n                              src={`http://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png`}\n                              className=\"forecastWeatherIcon\"\n                              alt={item.weather[0].main}\n                            />\n                            <div className=\" vertical-center\">\n                              {Math.round(item.main.temp)}ยบ\n                            </div>\n                          </div>\n                        </div>\n                      </small>\n                    </h5>\n                  </li>\n                )\n              );\n            })}\n          </ul>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"errorBlock\">\n          <h5>Forecast not Available.</h5>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Forecast;\n","/* Component that renders the list of the city availables for weather consult.\n   The city can also be typed by the user.\n */\n\nimport React from \"react\";\nimport \"../styles/CountryList.css\";\nimport \"../styles/Common.css\";\n\nclass CountryList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: [],\n      city: \"Lisbon\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://restcountries.eu/rest/v2/all\")\n      .then(res => res.json())\n      .then(\n        result => {\n          this.setState({\n            isLoaded: true,\n            items: result\n          });\n        },\n\n        error => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      );\n  }\n\n  change(event) {\n    this.props.cityhandler(event);\n    this.setState({\n      city: event.target.value\n    });\n  }\n\n  render() {\n    const { error, isLoaded, items } = this.state;\n\n    items.sort(function(a, b) {\n      if (a.capital !== \"\" && b.capital !== \"\") {\n        a.capital = a.capital.toLowerCase();\n        b.capital = b.capital.toLowerCase();\n\n        return a.capital < b.capital ? -1 : a.capital > b.capital ? 1 : 0;\n      }\n    });\n\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div>\n          <input\n            list=\"cities\"\n            name=\"city\"\n            onChange={this.change.bind(this)}\n            value={this.state.city}\n          />\n          <datalist id=\"cities\" className=\"custom-select\">\n            {items.map(item => {\n              return (\n                item.capital && (\n                  <option key={item.alpha3Code} value={item.capital}>\n                    {item.capital}\n                  </option>\n                )\n              );\n            })}\n          </datalist>\n        </div>\n      );\n    }\n  }\n}\n\nexport default CountryList;\n","/* Component that renders the header of the app */\n\nimport React from \"react\";\nimport logo from \"../img/logo.svg\";\nimport \"../styles/Header.css\";\n\nfunction Header() {\n  return (\n    <div className=\"Header\">\n      <h4>\n        <img src={logo} className=\"Header-logo\" alt=\"logo\" />\n        Wheater<span className=\"highlightColor\">/</span>io\n      </h4>\n    </div>\n  );\n}\n\nexport default Header;\n","/* Component that renders the switch to change between Celsius and Fahrenheit */\n\nimport React from \"react\";\nimport \"../styles/Switch.css\";\n\nclass Switch extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isChecked: false\n    };\n  }\n\n  change(event) {\n    this.props.unithandler(event);\n    this.setState({\n      isChecked: event.target.checked\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"\">\n        <label className=\"switch switch-flat\">\n          <input\n            className=\"switch-input\"\n            type=\"checkbox\"\n            onChange={this.change.bind(this)}\n            value={this.state.isChecked}\n          />\n          <span\n            className=\"switch-label\"\n            data-on=\"Fahrenheit\"\n            data-off=\"Celsius\"\n          ></span>\n          <span className=\"switch-handle\"></span>\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default Switch;\n","/* Main component for the weather APP - Renders all the sub-components */\n\nimport React from 'react';\nimport '../styles/App.css';\nimport '../styles/Common.css';\nimport CurrentWeather from './CurrentWeather';\nimport Forecast from './Forecast';\nimport CountryList from './CountryList';\nimport Header from './Header';\nimport Switch from './Switch';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n          city: 'Lisbon',\n          fahrenheit: false\n    };\n    this.cityhandler = this.cityhandler.bind(this)\n    this.unithandler = this.unithandler.bind(this)\n  }\n\n  cityhandler(event) {\n    this.setState({\n        city: event.target.value\n    })\n  }\n\n  unithandler(event) {\n    this.setState({\n        fahrenheit: event.target.checked\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"background\"></div>\n        <div className=\"App-header\">\n\n            <Header></Header>\n\n          <div className=\"container\">\n            <div className=\"third-box half-right\">\n\n              <CountryList cityhandler={this.cityhandler}></CountryList>\n\n            </div>\n            <div className=\"third-box half-center\">\n              <h1 className=\"capitalize\">\n                <div className=\"container\">\n                  {this.state.city}\n                </div>\n              </h1>\n            </div>\n            <div className=\"third-box half-left\">\n\n              <Switch unithandler={this.unithandler}></Switch>\n\n            </div>\n          </div>\n\n          <div className=\"container containerResponsive\">\n            <div className=\"half-box half-left\">\n\n              <CurrentWeather data={this.state}></CurrentWeather>\n\n            </div>\n            <div className=\"half-box half-right\">\n\n              <Forecast data={this.state}></Forecast>\n\n            </div>\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}